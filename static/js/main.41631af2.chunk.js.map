{"version":3,"sources":["reducers/bookReducer.js","contexts/BookContext.js","components/Navbar.js","actions/removeBookAction.js","constants.js","components/BooksDetails.js","components/BookList.js","actions/addBookAction.js","components/BookForm.js","App.js","serviceWorker.js","index.js"],"names":["bookReducer","state","action","console","log","type","nuewArray","payload","filter","book","id","BookContext","createContext","BookContextProvider","props","useReducer","title","author","books","dispatch","Provider","value","children","Navbar","useContext","className","length","removeBookAction","BooksDetails","onClick","BookList","map","key","addBookAction","uuid","BookForm","useState","setBook","handleInput","e","target","name","onSubmit","preventDefault","htmlFor","placeholder","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+OAGaA,EAAc,SAACC,EAAMC,GAEhC,OADEC,QAAQC,IAAR,oBACMF,EAAOG,MAEb,IAAK,WACH,IAAMC,EAAS,sBAAOL,GAAP,CAAcC,EAAOK,UAEpC,OADAJ,QAAQC,IAAR,2BAAgCE,IACzBA,EAET,IAAK,cACH,OAAOL,EAAMO,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAOR,EAAOK,WAEjD,QAEC,OADGJ,QAAQC,IAAIF,GACRD,ICdCU,EAAcC,0BAmBZC,EAjBa,SAAAC,GACxB,IADiC,EAOPC,qBAAWf,EANf,CAClB,CAACgB,MAAO,oBAAqBC,OAAO,kBAAmBP,GAAG,GAC1D,CAACM,MAAO,oBAAqBC,OAAO,qBAAsBP,GAAG,KAHhC,mBAO1BQ,EAP0B,KAOnBC,EAPmB,KAUjC,OACI,kBAACR,EAAYS,SAAb,CAAsBC,MAAO,CAACH,QAAMC,aAC/BL,EAAMQ,WCJJC,EAVA,WAAO,IACXL,EAASM,qBAAWb,GAApBO,MACP,OACI,yBAAKO,UAAU,UACX,2CACR,qCAAYP,GAASA,EAAMQ,OAA3B,sBCCWC,EAPU,SAAAjB,GAAE,MACvB,CACIL,KCHmB,cDInBE,QAASG,IEUFkB,EAXM,SAAC,GAAY,IAAXnB,EAAU,EAAVA,KACZU,EAAYK,qBAAWb,GAAvBQ,SACP,OACG,4BACK,yBAAKM,UAAU,SAAf,SAA8BhB,EAAKO,OACnC,yBAAKS,UAAU,UAAf,UAAgChB,EAAKQ,QACrC,4BAAQY,QAAS,kBAAMV,EAASQ,EAAiBlB,EAAKC,OAAtD,gBCSGoB,EAfE,WAAO,IACbZ,EAASM,qBAAWb,GAApBO,MACR,OACEA,GAASA,EAAMQ,OAAS,EACpB,yBAAKD,UAAU,aACX,4BACKP,GAASA,EAAMa,KAAI,SAAAtB,GAAI,OACpB,kBAAC,EAAD,CAAcA,KAAMA,EAAMuB,IAAKvB,EAAKC,UAI/C,yBAAKe,UAAU,SAAf,uC,cCLKQ,EAPO,SAACjB,EAAOC,GAC5B,MAAO,CACLZ,KHLoB,WGMpBE,QAAS,CAAES,QAAOC,SAAQP,GAAIwB,SCwCnBC,EA1CE,WAAO,IAAD,EACOX,qBAAWb,GAA/BQ,EADa,EACbA,SADa,KACHD,MACMkB,mBAAS,KAFZ,mBAEd3B,EAFc,KAER4B,EAFQ,KAIfC,EAAc,SAAAC,GAClBF,EAAQ,eACH5B,EADE,eAEJ8B,EAAEC,OAAOC,KAAOF,EAAEC,OAAOnB,UAU9B,OACE,0BAAMqB,SAPa,SAAAH,GACnBA,EAAEI,iBACFxB,EAASc,EAAcxB,EAAKO,MAAOP,EAAKQ,SAExCoB,EAAQ,CAACrB,MAAO,GAAGC,OAAO,OAIxB,2BAAO2B,QAAQ,SAAf,SACA,2BACEvC,KAAK,OACLoC,KAAK,QACL/B,GAAG,QACHmC,YAAY,QACZxB,MAAOZ,EAAKO,MACZ8B,SAAUR,IAEZ,2BAAOM,QAAQ,UAAf,UACA,2BACEvC,KAAK,OACLoC,KAAK,SACL/B,GAAG,SACHmC,YAAY,SACZxB,MAAOZ,EAAKQ,OACZ6B,SAAUR,IAEZ,2BAAOjC,KAAK,SAASgB,MAAM,eCtBlB0B,MAZf,WACE,OACE,yBAAKtB,UAAU,OACf,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCDcuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.41631af2.chunk.js","sourcesContent":["\r\nimport { ADD_BOOK, REMOVE_BOOK } from '../constants';\r\n\r\nexport const bookReducer = (state,action ) => {\r\n    console.log(`Llego a reducer `)\r\n  switch (action.type) {\r\n     \r\n    case 'ADD_BOOK':\r\n      const nuewArray = [...state, action.payload];\r\n      console.log(`this is newArray ${nuewArray}`);\r\n      return nuewArray;\r\n\r\n    case 'REMOVE_BOOK':\r\n      return state.filter(book => book.id !== action.payload);\r\n\r\n    default:\r\n        console.log(action);\r\n     return state;\r\n  }\r\n};\r\n","import React, {createContext, useState, useReducer} from 'react';\r\nimport uuid from 'uuid';\r\nimport { bookReducer } from '../reducers/bookReducer';\r\nexport const BookContext = createContext();\r\n\r\nconst BookContextProvider = props => {\r\n    const initialSatate = [\r\n        {title: 'Name of the wind ', author:'Patrick Rotfuss', id:1},\r\n        {title: 'The final Empire ', author:'Brandom  Serderson', id:2},\r\n    ];\r\n\r\n    //const [books,setBooks] = useState(initialSatate);\r\n    const [books, dispatch] = useReducer(bookReducer, initialSatate);\r\n    \r\n    \r\n    return (\r\n        <BookContext.Provider value={{books,dispatch}}>\r\n            {props.children}\r\n        </BookContext.Provider>\r\n    );\r\n};\r\n\r\nexport default BookContextProvider;","import React, {useContext} from 'react';\r\nimport { BookContext } from '../contexts/BookContext';\r\n\r\nconst Navbar = () => {\r\n    const {books} = useContext(BookContext);\r\n    return (\r\n        <div className=\"navbar\">\r\n            <h1>Frank Books</h1>\r\n    <p>I have { books && books.length} to get throught</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navbar;","import { REMOVE_BOOK } from \"../constants\";\r\n\r\nconst removeBookAction = id => (\r\n    {\r\n        type: REMOVE_BOOK,\r\n        payload: id,\r\n    }\r\n)\r\n\r\nexport default removeBookAction;","export const ADD_BOOK = \"ADD_BOOK\";\r\nexport const REMOVE_BOOK = \"REMOVE_BOOK\";","import React, {useContext} from 'react';\r\nimport { BookContext } from '../contexts/BookContext';\r\nimport removeBookAction from '../actions/removeBookAction';\r\n\r\nconst BooksDetails = ({book}) => {\r\n    const {dispatch} = useContext(BookContext);\r\n    return (\r\n       <li>\r\n            <div className='title'>Title:{book.title}</div>\r\n            <div className='author'>Author:{book.author}</div>\r\n            <button onClick={() => dispatch(removeBookAction(book.id))}>DeleteBook</button>\r\n       </li>\r\n    );\r\n};\r\n\r\nexport default BooksDetails;\r\n","import React,{useContext} from 'react';\r\nimport { BookContext } from '../contexts/BookContext';\r\nimport BooksDetails from './BooksDetails';\r\n\r\nconst BookList = () => {\r\n    const {books} = useContext(BookContext);\r\n   return(\r\n     books && books.length > 0 ? (\r\n         <div className=\"book-list\">\r\n             <ul>\r\n                 {books && books.map(book => (\r\n                     <BooksDetails book={book} key={book.id}/>\r\n                 ))}\r\n             </ul>\r\n         </div>\r\n     ) : (<div className='empty'> No books to read. Hello free time</div>)\r\n   )\r\n};\r\n\r\nexport default BookList","import { ADD_BOOK } from \"../constants\";\r\nimport uuid from \"uuid\";\r\n\r\nconst addBookAction = (title, author) => {\r\n  return {\r\n    type: ADD_BOOK,\r\n    payload: { title, author, id: uuid() }\r\n  };\r\n};\r\n\r\nexport default addBookAction;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { BookContext } from \"../contexts/BookContext\";\r\nimport addBookAction from \"../actions/addBookAction\";\r\n\r\nconst BookForm = () => {\r\n  const { dispatch, books } = useContext(BookContext);\r\n  const [book, setBook] = useState({});\r\n\r\n  const handleInput = e => {\r\n    setBook({\r\n      ...book,\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    dispatch(addBookAction(book.title, book.author));\r\n    \r\n    setBook({title: '',author:''})\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label htmlFor=\"title\">Title</label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"title\"\r\n        id=\"title\"\r\n        placeholder=\"Title\"\r\n        value={book.title}\r\n        onChange={handleInput}\r\n      />\r\n      <label htmlFor=\"author\">Author</label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"author\"\r\n        id=\"author\"\r\n        placeholder=\"Author\"\r\n        value={book.author}\r\n        onChange={handleInput}\r\n      />\r\n      <input type=\"submit\" value=\"Add book\" />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default BookForm;\r\n","import React from 'react';\nimport BookContextProvider from './contexts/BookContext';\nimport Navbar from './components/Navbar';\nimport BookList from './components/BookList';\nimport BookForm from './components/BookForm';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <BookContextProvider>\n      <Navbar/>\n      <BookList/>\n      <BookForm/>\n    </BookContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}